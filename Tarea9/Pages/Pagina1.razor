@page "/pagina1"

@using Tarea9.Data
@using System.Net;
@using System.Web;
@using System.Net.Mail;
@inject ApiCedulaService ApiCedulaService

<h3>Registrar vacuna a domicilio</h3>

<form class="w-75">
    <div class="mb-3">
        <label for="txtcedula" class="form-label">Cédula</label>
        <input type="text" class="form-control" id="txtcedula" @bind-value="cedula" required>
        <br>
        <button class="btn btn-secondary" @onclick="ValidarCedula" type="button">verificar</button>
    </div>

    <div class="mb-3">
        <label for="txtnombre" class="form-label">Nombre</label>
        <input type="text" class="form-control" id="txtnombre" @bind-value="nombre" disabled required>
    </div>

    <div class="mb-3">
        <label for="txtapellido" class="form-label">Apellido</label>
        <input type="text" class="form-control" id="txtapellido" @bind-value="apellido" disabled required>
    </div>

    <div class="mb-3">
        <label for="txttelefono" class="form-label">Teléfono</label>
        <input type="text" class="form-control" id="txttelefono" @bind-value="telefono" pattern="[0-9]+" required>
    </div>

    <div class="mb-3">
        <label for="txtcorreo" class="form-label">Correo electrónico</label>
        <input type="email" class="form-control" id="txtcorreo" @bind-value="correo" placeholder="sample@sample.com" required>
    </div>

    <div class="mb-3">
        <label for="txtfecha" class="form-label">Fecha de nacimiento</label>
        <input type="date" class="form-control" id="txtfecha" @bind-value="fechaNacimiento" disabled required>
    </div>

    <div class="mb-3">
        <label for="txtsangre" class="form-label">Tipo de sangre</label>
        <select id="txtsangre" @bind="tsangre">
            <option value="null" selected>Seleccione el tipo de sangre</option>
            <option value="O negativo">O negativo</option>
            <option value="O positivo">O positivo</option>
            <option value="A negativo">A negativo</option>
            <option value="A positivo">A positivo</option>
            <option value="B negativo">B negativo</option>
            <option value="B positivo">B positivo</option>
            <option value="AB negativo">AB negativo</option>
            <option value="AB positivo">AB positivo</option>
        </select>
    </div>
    
    <div class="mb-3">
        <label for="map" class="form-label">Seleccione una ubicacion en el mapa</label>
        <RadzenGoogleMap id="map" style="height: 400px" Zoom=@zoom Center=@(new GoogleMapPosition() { Lat = 18.98367097987177, Lng = -70.45763034294242 }) MapClick=@OnMapClick>
            <Markers>
                <RadzenGoogleMapMarker Position=@(new GoogleMapPosition() { Lat = latitud, Lng=longitud }) />
            </Markers>
        </RadzenGoogleMap>
    </div>

    <label class="form-check-label">¿Ha tenido COVID-19?</label>
    <div class="form-check">
        <RadzenRadioButtonList @bind-Value=@radio TValue="int" Orientation="Orientation.Vertical">
            <Items>
                <RadzenRadioButtonListItem Text="No" Value="1" selected />
                <RadzenRadioButtonListItem Text="Si" Value="2" />
            </Items>
        </RadzenRadioButtonList>
    </div>

    <div class="mb-3">
        <label for="Textarea1" class="form-label">Justifique porque deben vacunarlo en su casa</label>
        <textarea class="form-control" id="Textarea1" rows="3" @bind="justificacion" required></textarea>
    </div>

    <button class="btn btn-primary mb-3" @onclick="registrarSolicitud">Confirmar</button>
</form>

<br />
<br />
<br />

<footer>
    <hr />

    <a href="Acerca">Acerca de</a>
    <br />
    <br />
</footer>

@code {
    [Inject]
    public IJSRuntime JS { get; set; }

    int zoom = 7;

    string cedula;
    string nombre;
    string apellido;

    long telefono;

    string correo;

    DateTime fechaNacimiento = new DateTime();

    string tsangre;
    int radio;
    string radio_respuesta;

    string justificacion;

    double latitud;
    double longitud;

    int mapa_clickado;

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        mapa_clickado++;
        latitud = args.Position.Lat;
        longitud = args.Position.Lng;
    }

    public async Task registrarSolicitud()
    {
        if (radio == 1)
        {
            radio_respuesta = "No";
        }
        else if(radio == 2)
        {
            radio_respuesta = "Si";
        }

        if (IsNotNullOrEmpty(tsangre) && IsNotNullOrEmpty(radio_respuesta) && mapa_clickado > 0)
        {
            string API = "https://api-tarea9.herokuapp.com/api/Registrar_P/" + $"{cedula}/{nombre}/{apellido}/{fechaNacimiento.ToString().Replace("/", "-")}/{telefono}/{correo}/{tsangre}/None/None/{latitud}/{longitud}/{radio_respuesta}/{justificacion}"
                            .Replace(" ", "%20")
                            .Replace("@", "%40")
                            .Replace(":", "%3A");

            WebClient cliente = new WebClient();
            string datos = await cliente.DownloadStringTaskAsync(API);
            
            Mensaje mensaje = JsonConvert.DeserializeObject<Mensaje>(datos);

            await JS.InvokeVoidAsync("alert", mensaje.mensaje);

            if (mensaje.mensaje != "Usuario ya se vacuno")
                await enviarCorreo();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Debe llenar todos los campos");
        }
    }

    public async Task ValidarCedula()
    {
        var apiContent = await ApiCedulaService.GetDatosAsync(cedula);

        if (apiContent == null)
        {
            await JS.InvokeVoidAsync("alert", "Debe ingresar una cedula valida");
        }
        else
        {
            nombre = apiContent.Nombres;
            apellido = $"{apiContent.Apellido1} {apiContent.Apellido2}";
            fechaNacimiento = apiContent.FechaNacimiento;
        }
    }

    public async Task enviarCorreo()
    {
        try
        {
            using (MailMessage mail = new MailMessage())
            {
                mail.From = new MailAddress("smexample0@gmail.com");
                mail.To.Add(correo);
                mail.Subject = "Solicitud vacuna a domicilio";
                mail.Body =
                    "<h2>Confirmación solicitud vacuna a domicilio</h2>" + "\n" +
                    $"<h6>Gracias por preferirnos {nombre} {apellido} con este correo confirmamos su solicitud <br/>" +
                    $"de su vacunación a domicilio.</h6>";

                mail.IsBodyHtml = true;

                using (SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587))
                {
                    smtp.Credentials = new NetworkCredential("smexample0@gmail.com","enviarcorreos");
                    smtp.EnableSsl = true;
                    await smtp.SendMailAsync(mail);
                }
            }
        }
        catch (Exception)
        {

        }
    }

    public bool IsNotNullOrEmpty(string str) => str != null && str.Any() ? true : false;

    public class Mensaje
    {
        public string mensaje { get; set; }
    }
}
